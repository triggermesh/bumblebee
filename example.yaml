apiVersion: eventing.knative.dev/v1beta1
kind: Broker
metadata:
  annotations:
    eventing.knative.dev/broker.class: MTChannelBasedBroker
  name: transformation-demo
spec:
  config:
    apiVersion: v1
    kind: ConfigMap
    name: config-br-default-channel
    namespace: knative-eventing

---

apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: event-display
spec:
  template:
    spec:
      containers:
      - image: gcr.io/knative-releases/knative.dev/eventing-contrib/cmd/event_display

---

apiVersion: eventing.knative.dev/v1beta1
kind: Trigger
metadata:
  name: trigger-transformation
spec:
  broker: transformation-demo
  filter:
    attributes:
      type: dev.knative.sources.ping
  subscriber:
    ref:
      apiVersion: flow.triggermesh.io/v1alpha1
      kind: Transformation
      name: demo
      namespace: default

---

apiVersion: eventing.knative.dev/v1beta1
kind: Trigger
metadata:
  name: trigger-eventdisplay
spec:
  broker: transformation-demo
  filter: 
    attributes:
      type: ce.after.transformation
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: event-display
      namespace: default

---

apiVersion: sources.knative.dev/v1alpha2
kind: PingSource
metadata:
  name: ping-source
spec:
  schedule: "*/1 * * * *"
  jsonData: '{
    "foo": "bar", 
    "extra": "data", 
    "project": "Triggermesh"
    }'
  sink:
    ref:
      apiVersion: eventing.knative.dev/v1beta1
      kind: Broker
      name: transformation-demo

---

apiVersion: flow.triggermesh.io/v1alpha1
kind: Transformation
metadata:
  name: demo
spec:
  events:
  - transform: '[{"operation": "delete", "spec": {"paths": ["extra"]}}]'
  - transform: '[{"operation": "uuid", "spec": {"uuid": { "version": 4 }}}]'
  - transform: '[{"operation": "shift", "spec": {"not-foo": "foo"}}]'
  - targetType: ce.after.transformation
    transform: '[{"operation": "concat", "spec": {"sources": [{"value": "hello"}, {"path": "project"}], "targetPath": "project", "delim": ","}}]'

